// Copyright (C) 2020 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Based off of the original vulkan.h header file which has the following
// license.

// Copyright (c) 2015 The Khronos Group Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and/or associated documentation files (the
// "Materials"), to deal in the Materials without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Materials, and to
// permit persons to whom the Materials are furnished to do so, subject to
// the following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Materials.
//
// THE MATERIALS ARE PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
// IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
// CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
// TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
// MATERIALS OR THE USE OR OTHER DEALINGS IN THE MATERIALS.

///////////
// Enums //
///////////

// Updated in api/enums.api

/////////////
// Structs //
/////////////

@extension("VK_KHR_external_fence_fd")
class VkImportFenceFdInfoKHR {
  VkStructureType                      sType
  const void*                          pNext
  VkFence                              fence
  VkFenceImportFlags                   flags
  VkExternalFenceHandleTypeFlagBits    handleType
  int                                  fd
}

@extension("VK_KHR_external_fence_fd")
class VkFenceGetFdInfoKHR {
  VkStructureType                      sType
  const void*                          pNext
  VkFence                              fence
  VkExternalFenceHandleTypeFlagBits    handleType
}

//////////////
// Commands //
//////////////

@extension("VK_KHR_external_fence_fd")
@threadSafety("system")
@indirect("VkDevice")
@custom
cmd VkResult vkImportFenceFdKHR(
    VkDevice                                    device,
    const VkImportFenceFdInfoKHR*               pImportFenceFdInfo) {
  if !(device in Devices) { vkErrorInvalidDevice(device) }
  if pImportFenceFdInfo == null { vkErrorNullPointer("VkImportFenceFdInfoKHR") }
  info := pImportFenceFdInfo[0]
  if !(info.fence in Fences) { vkErrorInvalidFence(info.fence) }
  f := Fences[info.fence]

  if (as!u32(info.flags) & as!u32(VK_FENCE_IMPORT_TEMPORARY_BIT)) != 0 {
    if !f.TemporaryExternal {
      f.TemporaryExternal = true

      // The old fence payload, including its Signaled status, is temporarily overwritten.
      // Save the old Signald status so we can restore it.
      f.SavedSignaled = f.Signaled

      // Mark the fence as currently unsignaled.
      f.Signaled = false
    }
  } else {
    f.PermanentExternal = true

    // The old fence payload is destroyed, so the previous Signaled status is meaningless.
    f.Signaled = false
  }

  return ?
}

@extension("VK_KHR_external_fence_fd")
@threadSafety("system")
@indirect("VkDevice")
@custom
cmd VkResult vkGetFenceFdKHR(
    VkDevice                                    device,
    const VkFenceGetFdInfoKHR*                  pGetFdInfo,
    int*                                        pFd) {
  if !(device in Devices) { vkErrorInvalidDevice(device) }
  if pGetFdInfo == null { vkErrorNullPointer("VkFenceGetFdInfoKHR") }
  get_fd_info := pGetFdInfo[0]
  if !(get_fd_info.fence in Fences) { vkErrorInvalidFence(get_fd_info.fence) }
  Fences[get_fd_info.fence].PermanentExternal = true

  if pFd == null { vkErrorNullPointer("int") }
  fd := ?
  pFd[0] = fd

  return ?
}
