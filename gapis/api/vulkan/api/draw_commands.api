// Copyright (C) 2018 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Based off of the original vulkan.h header file which has the following
// license.

// Copyright (c) 2015 The Khronos Group Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and/or associated documentation files (the
// "Materials"), to deal in the Materials without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Materials, and to
// permit persons to whom the Materials are furnished to do so, subject to
// the following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Materials.
//
// THE MATERIALS ARE PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
// EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
// IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
// CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
// TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
// MATERIALS OR THE USE OR OTHER DEALINGS IN THE MATERIALS.

@internal
class BoundIndexBuffer {
  VkIndexType Type
  BoundBuffer BoundBuffer
}

@internal class
vkCmdBindIndexBufferArgs {
  VkBuffer     Buffer
  VkDeviceSize Offset
  VkIndexType  IndexType
}


sub void dovkCmdBindIndexBuffer(ref!vkCmdBindIndexBufferArgs buffer) {
  lastDrawInfo().BoundIndexBuffer = new!BoundIndexBuffer(buffer.IndexType,
    BoundBuffer(Buffers[buffer.Buffer], buffer.Offset, 0))
  Buffers[buffer.Buffer].LastBoundQueue = LastBoundQueue
}


@threadSafety("app")
@indirect("VkCommandBuffer", "VkDevice")
@threadsafe
cmd void vkCmdBindIndexBuffer(
    VkCommandBuffer commandBuffer,
    VkBuffer        buffer,
    VkDeviceSize    offset,
    VkIndexType     indexType) {
  if !(commandBuffer in CommandBuffers) { vkErrorInvalidCommandBuffer(commandBuffer) }
  if !(buffer in Buffers) { vkErrorInvalidBuffer(buffer) }
  args := new!vkCmdBindIndexBufferArgs(
    Buffer:     buffer,
    Offset:     offset,
    IndexType:  indexType
  )

  mapPos := as!u32(len(CommandBuffers[commandBuffer].BufferCommands.vkCmdBindIndexBuffer))
  CommandBuffers[commandBuffer].BufferCommands.vkCmdBindIndexBuffer[mapPos] =
  args

  AddCommand(commandBuffer, cmd_vkCmdBindIndexBuffer, mapPos)
}

@internal class
vkCmdBindVertexBuffersArgs {
  u32                     FirstBinding
  u32                     BindingCount
  map!(u32, VkBuffer)     Buffers
  map!(u32, VkDeviceSize) Offsets
}

@internal
class CmdBindBuffer {
  map!(u32, BoundBuffer) BoundBuffers
}

sub void dovkCmdBindVertexBuffers(ref!vkCmdBindVertexBuffersArgs bind) {
  for i in (0 .. len(bind.Buffers)) {
    v := bind.Buffers[as!u32(i)]
    lastDrawInfo().BoundVertexBuffers[as!u32(i) + bind.FirstBinding] = BoundBuffer(
      Buffers[v], bind.Offsets[as!u32(i)],
      Buffers[v].Info.Size - bind.Offsets[as!u32(i)])
    Buffers[v].LastBoundQueue = LastBoundQueue
  }
}

@threadSafety("app")
@indirect("VkCommandBuffer", "VkDevice")
@threadsafe
cmd void vkCmdBindVertexBuffers(
    VkCommandBuffer     commandBuffer,
    u32                 firstBinding,
    u32                 bindingCount,
    const VkBuffer*     pBuffers,
    const VkDeviceSize* pOffsets) {
  if !(commandBuffer in CommandBuffers) { vkErrorInvalidCommandBuffer(commandBuffer) }
  args := new!vkCmdBindVertexBuffersArgs(
    FirstBinding:  firstBinding,
    BindingCount:  bindingCount
  )
  buffers := pBuffers[0:bindingCount]
  offsets := pOffsets[0:bindingCount]
  for i in (0 .. bindingCount) {
    if !(buffers[i] in Buffers) { vkErrorInvalidBuffer(buffers[i]) }
    args.Buffers[i] = buffers[i]
    args.Offsets[i] = offsets[i]
  }

  mapPos := as!u32(len(CommandBuffers[commandBuffer].BufferCommands.vkCmdBindVertexBuffers))
  CommandBuffers[commandBuffer].BufferCommands.vkCmdBindVertexBuffers[mapPos] =
  args

  AddCommand(commandBuffer, cmd_vkCmdBindVertexBuffers, mapPos)
}

@internal class vkCmdDrawArgs {
  u32 VertexCount
  u32 InstanceCount
  u32 FirstVertex
  u32 FirstInstance
}


sub void dovkCmdDraw(ref!vkCmdDrawArgs draw) {
  readDrawState()
  useRenderPass()

  readWriteMemoryInBoundGraphicsDescriptorSets()
  readMemoryInCurrentPipelineBoundVertexBuffers(draw.VertexCount, draw.InstanceCount, draw.FirstVertex, draw.FirstInstance)
  clearLastDrawInfoDrawCommandParameters()
  lastDrawInfo().CommandParameters.Draw = draw
}

@threadSafety("app")
@indirect("VkCommandBuffer", "VkDevice")
@executed_draw
@threadsafe
cmd void vkCmdDraw(
    VkCommandBuffer commandBuffer,
    u32             vertexCount,
    u32             instanceCount,
    u32             firstVertex,
    u32             firstInstance) {
  if !(commandBuffer in CommandBuffers) { vkErrorInvalidCommandBuffer(commandBuffer) }
  args := new!vkCmdDrawArgs(vertexCount, instanceCount, firstVertex, firstInstance)

  mapPos := as!u32(len(CommandBuffers[commandBuffer].BufferCommands.vkCmdDraw))
  CommandBuffers[commandBuffer].BufferCommands.vkCmdDraw[mapPos] =
  args

  AddCommand(commandBuffer, cmd_vkCmdDraw, mapPos)
}

@internal class
vkCmdDrawIndexedArgs {
  u32 IndexCount
  u32 InstanceCount
  u32 FirstIndex
  s32 VertexOffset
  u32 FirstInstance
}

sub void dovkCmdDrawIndexed(ref!vkCmdDrawIndexedArgs draw) {
  readDrawState()
  useRenderPass()

  // Loop through the index buffer, and find the low and high
  // vertices. Then read all of the applicable vertex buffers.
  lastDraw := lastDrawInfo()
  indexBuffer := lastDraw.BoundIndexBuffer.BoundBuffer.Buffer
  indexSize := switch (lastDraw.BoundIndexBuffer.Type) {
    case VK_INDEX_TYPE_UINT16:
      as!VkDeviceSize(2)
    case VK_INDEX_TYPE_UINT32:
      as!VkDeviceSize(4)
  }

  numBytes := as!VkDeviceSize(draw.IndexCount) * indexSize
  startOffset := lastDrawInfo().BoundIndexBuffer.BoundBuffer.Offset + (indexSize * as!VkDeviceSize(draw.FirstIndex))

  // Read the data of the index buffer.
  readMemoryInBuffer(indexBuffer, startOffset, numBytes)
  // Read the whole vertex buffer.
  readMemoryInCurrentPipelineBoundVertexBuffers(0xFFFFFFFF, draw.InstanceCount, 0, draw.FirstInstance)
  readWriteMemoryInBoundGraphicsDescriptorSets()
  clearLastDrawInfoDrawCommandParameters()
  lastDrawInfo().CommandParameters.DrawIndexed = draw
}

@threadSafety("app")
@indirect("VkCommandBuffer", "VkDevice")
@executed_draw
@threadsafe
cmd void vkCmdDrawIndexed(
    VkCommandBuffer commandBuffer,
    u32             indexCount,
    u32             instanceCount,
    u32             firstIndex,
    s32             vertexOffset,
    u32             firstInstance) {
  if !(commandBuffer in CommandBuffers) { vkErrorInvalidCommandBuffer(commandBuffer) }
  args := new!vkCmdDrawIndexedArgs(
    IndexCount:     indexCount,
    InstanceCount:  instanceCount,
    FirstIndex:     firstIndex,
    VertexOffset:   vertexOffset,
    FirstInstance:  firstInstance
  )

  mapPos := as!u32(len(CommandBuffers[commandBuffer].BufferCommands.vkCmdDrawIndexed))
  CommandBuffers[commandBuffer].BufferCommands.vkCmdDrawIndexed[mapPos] =
  args

  AddCommand(commandBuffer, cmd_vkCmdDrawIndexed, mapPos)
}

@internal class vkCmdDrawIndirectArgs {
  VkBuffer     Buffer
  VkDeviceSize Offset
  u32          DrawCount
  u32          Stride
}

sub void dovkCmdDrawIndirect(ref!vkCmdDrawIndirectArgs draw) {
  readDrawState()
  useRenderPass()

  if draw.DrawCount > 0 {
    readWriteMemoryInBoundGraphicsDescriptorSets()
    command_size := as!VkDeviceSize(16)
    indirect_buffer_read_size := as!VkDeviceSize((draw.DrawCount - 1) * draw.Stride) + command_size
    readMemoryInBuffer(Buffers[draw.Buffer], draw.Offset, indirect_buffer_read_size)
    // Read through all the vertex buffers, as we cannot assume the buffer given to indirect draw is host
    readMemoryInCurrentPipelineBoundVertexBuffers(0xFFFFFFFF, 0xFFFFFFFF, 0, 0)
    clearLastDrawInfoDrawCommandParameters()
    lastDrawInfo().CommandParameters.DrawIndirect = draw
  }
}

@threadSafety("app")
@indirect("VkCommandBuffer", "VkDevice")
@executed_draw
@threadsafe
cmd void vkCmdDrawIndirect(
    VkCommandBuffer commandBuffer,
    VkBuffer        buffer,
    VkDeviceSize    offset,
    u32             drawCount,
    u32             stride) {
  if !(commandBuffer in CommandBuffers) { vkErrorInvalidCommandBuffer(commandBuffer) }
  if !(buffer in Buffers) { vkErrorInvalidBuffer(buffer) }
  args := new!vkCmdDrawIndirectArgs(buffer, offset, drawCount, stride)

  mapPos := as!u32(len(CommandBuffers[commandBuffer].BufferCommands.vkCmdDrawIndirect))
  CommandBuffers[commandBuffer].BufferCommands.vkCmdDrawIndirect[mapPos] =
  args

  AddCommand(commandBuffer, cmd_vkCmdDrawIndirect, mapPos)
}

@internal class vkCmdDrawIndexedIndirectArgs {
  VkBuffer     Buffer
  VkDeviceSize Offset
  u32          DrawCount
  u32          Stride
}

sub void dovkCmdDrawIndexedIndirect(ref!vkCmdDrawIndexedIndirectArgs draw) {
  readDrawState()
  useRenderPass()

  if draw.DrawCount > 0 {
    readWriteMemoryInBoundGraphicsDescriptorSets()
    command_size := as!VkDeviceSize(16)
    indirect_buffer_read_size := as!VkDeviceSize((draw.DrawCount - 1) * draw.Stride) + command_size
    readMemoryInBuffer(Buffers[draw.Buffer], draw.Offset, indirect_buffer_read_size)
    // Read through the whole index buffer.
    indexBuffer := lastDrawInfo().BoundIndexBuffer.BoundBuffer.Buffer
    readMemoryInBuffer(indexBuffer, 0, indexBuffer.Info.Size)
    // Read through all the vertex buffers.
    readMemoryInCurrentPipelineBoundVertexBuffers(0xFFFFFFFF, 0xFFFFFFFF, 0, 0)
    clearLastDrawInfoDrawCommandParameters()
    lastDrawInfo().CommandParameters.DrawIndexedIndirect = draw
  }
}

@threadSafety("app")
@indirect("VkCommandBuffer", "VkDevice")
@executed_draw
@threadsafe
cmd void vkCmdDrawIndexedIndirect(
    VkCommandBuffer commandBuffer,
    VkBuffer        buffer,
    VkDeviceSize    offset,
    u32             drawCount,
    u32             stride) {
  if !(commandBuffer in CommandBuffers) { vkErrorInvalidCommandBuffer(commandBuffer) }
  if !(buffer in Buffers) { vkErrorInvalidBuffer(buffer) }
  args := new!vkCmdDrawIndexedIndirectArgs(buffer, offset, drawCount, stride)

  mapPos := as!u32(len(CommandBuffers[commandBuffer].BufferCommands.vkCmdDrawIndexedIndirect))
  CommandBuffers[commandBuffer].BufferCommands.vkCmdDrawIndexedIndirect[mapPos] =
  args

  AddCommand(commandBuffer, cmd_vkCmdDrawIndexedIndirect, mapPos)
}

@internal class vkCmdDispatchArgs {
  u32 GroupCountX,
  u32 GroupCountY,
  u32 GroupCountZ
}

sub void dovkCmdDispatch(ref!vkCmdDispatchArgs args) {
  readWriteMemoryInBoundComputeDescriptorSets()
}

@threadSafety("app")
@indirect("VkCommandBuffer", "VkDevice")
@executed_draw
@threadsafe
cmd void vkCmdDispatch(
    VkCommandBuffer commandBuffer,
    u32             groupCountX,
    u32             groupCountY,
    u32             groupCountZ) {
  if !(commandBuffer in CommandBuffers) { vkErrorInvalidCommandBuffer(commandBuffer) }
  args :=
  new!vkCmdDispatchArgs(groupCountX, groupCountY, groupCountZ)

  mapPos := as!u32(len(CommandBuffers[commandBuffer].BufferCommands.vkCmdDispatch))
  CommandBuffers[commandBuffer].BufferCommands.vkCmdDispatch[mapPos] =
  args

  AddCommand(commandBuffer, cmd_vkCmdDispatch, mapPos)
}

@internal
class vkCmdDispatchIndirectArgs {
  VkBuffer     Buffer
  VkDeviceSize Offset
}

sub void dovkCmdDispatchIndirect(ref!vkCmdDispatchIndirectArgs dispatch) {
  command_size := as!VkDeviceSize(12)
  readMemoryInBuffer(Buffers[dispatch.Buffer], dispatch.Offset, command_size)
  readWriteMemoryInBoundComputeDescriptorSets()
}

@threadSafety("app")
@indirect("VkCommandBuffer", "VkDevice")
@executed_draw
@threadsafe
cmd void vkCmdDispatchIndirect(
    VkCommandBuffer commandBuffer,
    VkBuffer        buffer,
    VkDeviceSize    offset) {
  if !(commandBuffer in CommandBuffers) { vkErrorInvalidCommandBuffer(commandBuffer) }
  if !(buffer in Buffers) { vkErrorInvalidBuffer(buffer) }
  args := new!vkCmdDispatchIndirectArgs(buffer, offset)

  mapPos := as!u32(len(CommandBuffers[commandBuffer].BufferCommands.vkCmdDispatchIndirect))
  CommandBuffers[commandBuffer].BufferCommands.vkCmdDispatchIndirect[mapPos] =
  args

  AddCommand(commandBuffer, cmd_vkCmdDispatchIndirect, mapPos)
}

sub void readWriteMemoryInBoundGraphicsDescriptorSets() {
  readWriteMemoryInBoundDescriptorSets(
    lastDrawInfo().GraphicsPipeline.Layout,
    lastDrawInfo().DescriptorSets,
    lastDrawInfo().BufferBindingOffsets)
}

sub void readWriteMemoryInBoundComputeDescriptorSets() {
  readWriteMemoryInBoundDescriptorSets(
    lastComputeInfo().ComputePipeline.PipelineLayout,
    lastComputeInfo().DescriptorSets,
    lastComputeInfo().BufferBindingOffsets)
}

@internal class DynamicStateSet {
  bool[9] contains
}

sub  ref!DynamicStateSet unpackDynamicState(ref!DynamicData data) {
  obj := new!DynamicStateSet()
  for _, _, s in data.DynamicStates {
    if as!s32(s) < 9 {
      obj.contains[as!s32(s)] = true
    }
  }
  return obj
}

sub void readDrawState() {
  info := lastDrawInfo()
  pipeline := info.GraphicsPipeline

  dynamicState := unpackDynamicState(pipeline.DynamicState)
  
  // read all viewports
  if dynamicState.contains[as!u32(VK_DYNAMIC_STATE_VIEWPORT)] {
    _ = len(info.DynamicViewports)
  } else {
    _ = len(pipeline.ViewportState.Viewports)
  }

  // read all scissors
  if dynamicState.contains[as!u32(VK_DYNAMIC_STATE_SCISSOR)] {
    _ = len(info.DynamicScissors)
  } else {
    _ = len(pipeline.ViewportState.Scissors)
  }

  // read line width
  if dynamicState.contains[as!u32(VK_DYNAMIC_STATE_LINE_WIDTH)] {
    _ = info.DynamicLineWidth
  } else {
    _ = pipeline.RasterizationState.LineWidth
  }

  // read depth bias
  if dynamicState.contains[as!u32(VK_DYNAMIC_STATE_DEPTH_BIAS)] {
    _ = info.DynamicDepthBiasConstantFactor
    _ = info.DynamicDepthBiasClamp
    _ = info.DynamicDepthBiasSlopeFactor
  } else {
    _ = pipeline.RasterizationState.DepthBiasConstantFactor
    _ = pipeline.RasterizationState.DepthBiasClamp
    _ = pipeline.RasterizationState.DepthBiasSlopeFactor
  }

  // read blend constants
  if dynamicState.contains[as!u32(VK_DYNAMIC_STATE_BLEND_CONSTANTS)] {
    _ = info.DynamicBlendConstants[0]
    _ = info.DynamicBlendConstants[1]
    _ = info.DynamicBlendConstants[2]
    _ = info.DynamicBlendConstants[3]
  } else {
    _ = pipeline.ColorBlendState.BlendConstants[0]
    _ = pipeline.ColorBlendState.BlendConstants[1]
    _ = pipeline.ColorBlendState.BlendConstants[2]
    _ = pipeline.ColorBlendState.BlendConstants[3]
  }

  // read depth bounds
  if dynamicState.contains[as!u32(VK_DYNAMIC_STATE_BLEND_CONSTANTS)] {
    _ = info.DynamicMinDepthBounds
    _ = info.DynamicMaxDepthBounds
  } else {
    _ = pipeline.DepthState.MinDepthBounds
    _ = pipeline.DepthState.MaxDepthBounds
  }

  // read stencil state
  if dynamicState.contains[as!u32(VK_DYNAMIC_STATE_BLEND_CONSTANTS)] {
    _ = info.DynamicStencilFront.compareMask
    _ = info.DynamicStencilFront.writeMask
    _ = info.DynamicStencilFront.reference
    _ = info.DynamicStencilBack.compareMask
    _ = info.DynamicStencilBack.writeMask
    _ = info.DynamicStencilBack.reference
  } else {
    _ = pipeline.DepthState.Front.compareMask
    _ = pipeline.DepthState.Front.writeMask
    _ = pipeline.DepthState.Front.reference
    _ = pipeline.DepthState.Back.compareMask
    _ = pipeline.DepthState.Back.writeMask
    _ = pipeline.DepthState.Back.reference
  }

  readPushConstants(VK_PIPELINE_BIND_POINT_GRAPHICS)
}